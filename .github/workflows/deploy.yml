name: validate-and-deploy

on:
  pull_request:
    branches: [ dev ]
  push:
    branches: [ main ]


jobs:
  # Test on Pull Request
  validate:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          pip install -U pip
          pip install -r requirements.txt

      - name: Run unit tests
        run: pytest tests/

  # Terraform Infrastructure Deploy
  terraform-deploy:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      AWS_REGION: us-east-1

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.5

      - name: Terraform Init
        working-directory: ./nyc_311_terraform
        run: terraform init

      - name: Terraform Plan
        working-directory: ./nyc_311_terraform
        run: |
          terraform plan -out=tfplan \
            -var="aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -var="aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            -var="aws_session_token=${{ secrets.AWS_SESSION_TOKEN }}"

      - name: Terraform Apply
        working-directory: ./nyc_311_terraform
        run: terraform apply -auto-approve tfplan

  daily-etl:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest

    needs: terraform-deploy
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          pip install -U pip
          pip install -r requirements.txt


#      - name: Run fetch_and_upload.py
#        run: python scripts/fetch_and_upload.py
#        env:
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Upload etl.py to S3
        run: |
          aws s3 cp scripts/etl.py s3://cdac-final-project-data/ETL_script_for_glue/etl.py
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Run AWS Glue Job and wait for completion
        shell: bash
        run: |
          JOB_NAME="daily-etl-job"
          REGION="us-east-1"
          
          echo "Starting Glue Job..."
          RUN_ID=$(aws glue start-job-run --job-name $JOB_NAME --region $REGION --query 'JobRunId' --output text)
          
          echo "Started Glue Job with Run ID: $RUN_ID"
          STATUS="RUNNING"
          while [[ "$STATUS" == "RUNNING" || "$STATUS" == "STARTING" || "$STATUS" == "STOPPING" ]]; do
            echo "Checking job status..."
            sleep 30
            STATUS=$(aws glue get-job-run --job-name $JOB_NAME --run-id $RUN_ID --region $REGION --query 'JobRun.JobRunState' --output text)
            echo "Current status: $STATUS"
          done
          
          if [[ "$STATUS" == "SUCCEEDED" ]]; then
            echo "Glue job succeeded!"
            exit 0
          else
            echo "Glue job failed with status: $STATUS"
            exit 1
          fi

        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Run AWS Glue Crawler
        run: |
          aws glue start-crawler \
            --name crawler-etl-output \
            --region us-east-1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
